#!/usr/bin/env python
'''This script takes input files generated by
price and creates a new data frame containing specified
information and writes it as gff3 format files.
'''

import pandas as pd
import argparse
import csv
import collections

def create_nTuple_unfiltered(args, row):
    nTuple = collections.namedtuple('Pandas', ["seqName","source","type","start","stop","score","strand","phase","attribute"])

    candidate = getattr(row, "_3")
    p_value = float(getattr(row, "_8"))

    chromosome, rest = candidate.split(":")
    start, stop = rest.split("-")
    strand = chromosome[-1]
    chromosome = chromosome[:-1]

    source = "price"
    feature = "CDS"
    phase = "."
    attribute = "ID=" + chromosome + ":" + start + "-" + stop + ":" + strand \
              + ";Name=" + chromosome + ":" + start + "-" + stop + ":" + strand \
              + ";p_value=%.2f" % p_value + ";Condition=" + args.condition + ";Method=price"

    return nTuple(chromosome, source, feature, start, stop, p_value, strand, phase, attribute)


# little helper function to create named tuple without having to always state every argument
def create_nTuple_filtered(args, row):
    nTuple = collections.namedtuple('Pandas', ["seqName","source","type","start","stop","score","strand","phase","attribute"])

    chromosome = getattr(row, "_0")
    start = str(getattr(row, "_1"))
    stop = str(getattr(row, "_2"))
    strand = getattr(row, "_5")
    rpf = str(getattr(row, "_10"))

    source = "price"
    feature = "CDS"
    score = "."
    phase = "."
    attribute = "ID=" + chromosome + ":" + start + "-" + stop + ":" + strand \
              + ";Name=" + chromosome + ":" + start + "-" + stop + ":" + strand \
              + ";rpf=" + rpf + ";Condition=" + args.condition + ";Method=price"

    return nTuple(chromosome, source, feature, start, stop, score, strand, phase, attribute)


def to_gff3(args):
    filtered_df = pd.read_csv(args.in_filtered, sep='\t', header=None)
    unfiltered_df = pd.read_csv(args.in_unfiltered, sep='\t')

    rows_filtered = []

    for row in filtered_df.itertuples(index=False, name='Pandas'):
        rows_filtered.append(create_nTuple_filtered(args,row))
    rows_filtered = [row for row in rows_filtered if row is not None]


    rows_unfiltered = []
    for row in unfiltered_df.itertuples(index=False, name='Pandas'):
        rows_unfiltered.append(create_nTuple_unfiltered(args, row))
    rows_unfiltered = [row for row in rows_unfiltered if row is not None]

    filtered_res_df = pd.DataFrame.from_records(rows_filtered, columns=["seqName","source","type","start","stop","score","strand","phase","attribute"])
    unfiltered_res_df = pd.DataFrame.from_records(rows_unfiltered, columns=["seqName","source","type","start","stop","score","strand","phase","attribute"])

    return filtered_res_df, unfiltered_res_df


def main():
    # store commandline args
    parser = argparse.ArgumentParser(description='Converts price output to new data frame\
                                     containing specified information and saves it in gff3 format.')
    parser.add_argument("-i", action="store", dest="in_filtered", required=True
                                          , help= "the filtered bed file (created by price)")
    parser.add_argument("-u", action="store", dest="in_unfiltered", required=True
                                          , help= "the unfiltered tsv file (created by price)")
    parser.add_argument("-c", action="store", dest="condition", required=True
                                          , help= "the condition of the current file")
    parser.add_argument("-f", action="store", dest="out_filtered", required=True
                                           , help= "the output file name (filtered) (gff3 format)")
    parser.add_argument("-o", action="store", dest="out_unfiltered", required=True
                                           , help= "the output file name (unfiltered)(gff3 format)")
    args = parser.parse_args()
    gff3_filtered_df, gff3_unfiltered_df = to_gff3(args)

    gff3_filtered_df.to_csv(args.out_filtered, sep="\t", header=False, index=False, quoting=csv.QUOTE_NONE)
    gff3_unfiltered_df.to_csv(args.out_unfiltered, sep="\t", header=False, index=False, quoting=csv.QUOTE_NONE)


if __name__ == '__main__':
    main()
