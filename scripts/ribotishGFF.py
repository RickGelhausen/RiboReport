#!/usr/bin/env python
'''This script takes input files generated by
deepribo and creates a new data frame containing specified
information and writes it as gff3 format files.
'''

import pandas as pd
import re
import argparse
import numpy as np
import os
import csv
import collections


# little helper function to create named tuple without having to always state every argument
def createNTuple(args, row):
    nTuple = collections.namedtuple('Pandas', ["seqName","source","type","start","stop","score","strand","phase","attribute"])
    # txt file content
    gid = str(getattr(row, "Gid"))
    tid = str(getattr(row, "Tid"))
    symbol = getattr(row, "Symbol")
    gene_type = getattr(row, "GeneType")
    genome_pos = str(getattr(row, "GenomePos"))
    start_codon = str(getattr(row, "StartCodon"))
    start = getattr(row, "Start")
    stop = getattr(row, "Stop")
    tis_type = str(getattr(row, "TisType"))
    tis_group = str(getattr(row, "TISGroup"))
    tis_counts = getattr(row, "TISCounts")
    tis_pvalue = getattr(row, "TISPvalue")
    ribo_pvalue = getattr(row, "RiboPvalue")
    ribo_pstatus = str(getattr(row, "RiboPStatus"))
    fisher_pvalue = getattr(row, "FisherPvalue")
    tis_qvalue = getattr(row, "TISQvalue")
    frame_qvalue = getattr(row, "FrameQvalue")
    fisher_qvalue = getattr(row, "FisherQvalue")
    AA_length = getattr(row, "AALen")

    # new content
    chromosome, rest, strand = genome_pos.split(":")
    start, stop = rest.split("-")

    if ribo_pstatus == "N":
        return

    seqName = chromosome
    source = "ribotish"
    type = "CDS"
    score = "."
    phase = "."
    attribute = "ID=" + chromosome + ":" + start + "-" + stop + ":" + strand \
              + ";Name=" + chromosome + ":" + start + "-" + stop + ":" + strand \
              + ";Ribo_pvalue=" + str(ribo_pvalue) + ";Condition=" + args.condition + ";Method=ribotish"

    return nTuple(seqName, source, type, start, stop, score, strand, phase, attribute)


def to_gff3(args):
    inputDF = pd.read_csv(args.predictedORFs, sep='\t')

    # extract information from each row and build new dataframe in gff format
    rows = []
    for row in inputDF.itertuples(index=True, name='Pandas'):
        rows.append(createNTuple(args, row))
    rows = [row for row in rows if row is not None]
    return pd.DataFrame.from_records(rows, columns=["seqName","source","type","start","stop","score","strand","phase","attribute"])


def main():
    # store commandline args
    parser = argparse.ArgumentParser(description='Converts ribotish output to new data frame\
                                     containing specified information and saves it in gff3 format.')
    parser.add_argument("-i", "--inputCSV", action="store", dest="predictedORFs", required=True
                                          , help= "the input file. (created by reparation)")
    parser.add_argument("-c", "--condition", action="store", dest="condition", required=True
                                          , help= "the condition of the current file")
    parser.add_argument("-o", "--outputGFF", action="store", dest="outputGFF", required=True
                                           , help= "the output file name (gff3 format)")

    args = parser.parse_args()
    gff3df = to_gff3(args)

    gff3df.to_csv(args.outputGFF, sep="\t", header=False, index=False, quoting=csv.QUOTE_NONE)


if __name__ == '__main__':
    main()
