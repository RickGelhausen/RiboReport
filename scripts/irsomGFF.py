#!/usr/bin/env python
'''This script takes input files generated by
irsom and creates a new data frame containing specified
information and writes it as gff3 format files.
'''

import pandas as pd
import re
import argparse
import numpy as np
import os
import csv
import collections

def to_gff3(args):
    inputDF = pd.read_csv(args.predictedORFs, sep='\t')
    nTuple = collections.namedtuple('Pandas', ["seqName","source","type","start","stop","score","strand","phase","attribute"])

    # extract information from each row and build new dataframe in gff format
    rows = []
    for row in inputDF.itertuples(index=True, name='Pandas'):
        # txt file content
        name = getattr(row, "_1")
        BMU = getattr(row, "BMU")
        label = getattr(row, "label")
        probCoding = str(getattr(row, "proba_class_0"))
        probNonCoding = str(getattr(row, "proba_class_1"))

        if label == "noncoding":
            continue

        seqName, range, strand = name.split(":")
        start, stop = range.split("-")
        # new content
        source = "irsom"
        type = "CDS"
        score = "."
        phase = "."
        attribute = "ID=" + seqName + ":" + start + "-" + stop + ":" + strand \
                  + ";Name=" + seqName + ":" + start + "-" + stop + ":" + strand \
                  + ";Prob=" + probCoding + ";Condition=" + args.condition + ";Method=irsom"

        rows.append(nTuple(seqName,source,type,start,stop,score,strand,phase,attribute))

    return pd.DataFrame.from_records(rows, columns=["seqName","source","type","start","stop","score","strand","phase","attribute"])


def main():
    # store commandline args
    parser = argparse.ArgumentParser(description='Converts reperation output to new data frame\
                                     containing specified information and saves it in gff3 format.')
    parser.add_argument("-i", "--inputTXT", action="store", dest="predictedORFs", required=True
                                          , help= "the input file. (created by reparation)")
    parser.add_argument("-c", "--condition", action="store", dest="condition", required=True
                                          , help= "the condition of the current file")
    parser.add_argument("-o", "--outputGFF", action="store", dest="outputGFF", required=True
                                           , help= "the output file name (gff3 format)")

    args = parser.parse_args()
    gff3df = to_gff3(args)

    gff3df.to_csv(args.outputGFF, sep="\t", header=False, index=False, quoting=csv.QUOTE_NONE)


if __name__ == '__main__':
    main()
